generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  name               String?
  email              String         @unique
  passwordHash       String?        @map("password_hash")
  avatarUrl          String?        @map("avatar_url")
  tokens             Token[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]
  owns_projects      Project[]
  landing_pages      LandingPage[]
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
  GOOGLE
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  MASTER
  ADMIN
  MEMBER
  BILLING
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id        String   @id @default(uuid())
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @map("user_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String        @id @default(uuid())
  name                      String
  slug                      String        @unique
  domain                    String?       
  shouldAttachUsersByDomain Boolean       @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String?       @map("avatar_url")
  invites                   Invite[]
  members                   Member[]
  projects                  Project[]
  landing_pages             LandingPage[]
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  @@map("organizations")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  slug        String   @unique
  avatarUrl   String?  @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  owner          User         @relation(fields: [ownerId], references: [id])
  ownerId        String       @map("owner_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@map("projects")
}

model LandingPage {
  id              String           @id @default(uuid())
  name            String
  subdomain       String           @unique
  description     String?
  isActive        Boolean          @default(false) @map("is_active")
  autoActivate    Boolean          @default(false) @map("auto_activate")
  startDate       DateTime?        @map("start_date")
  endDate         DateTime?        @map("end_date")
  sections        SectionContent[]
  seoTitle        String           @map("seo_title")
  seoDescription  String           @map("seo_description")
  seoKeywords     String[]         @map("seo_keywords")
  seoImage        String           @map("seo_image")
  seoCanonicalUrl String           @map("seo_canonical_url") // composto por https://[subdomain].devtrails.com.br/

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner          User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String       @map("owner_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")
  template       Template     @relation(fields: [templateId], references: [id])
  templateId     String       @map("template_id")

  @@map("landing_pages")
}

model Template {
  id            String        @id @default(uuid())
  name          String
  templateSlug  String        @unique @map("template_slug")
  description   String
  sections      Section[]
  landing_pages LandingPage[]
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@map("templates")
}

model Section {
  id               String           @id @default(uuid())
  name             String
  fields           SectionField[]
  section_contents SectionContent[]
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String   @map("template_id")

  @@map("sections")
}

enum FieldType {
  TEXT
  RICH_TEXT
  IMAGE
  BOOLEAN
}

model SectionField {
  id         String    @id @default(uuid())
  name       String
  type       FieldType
  isRequired Boolean   @default(false) @map("is_required")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String  @map("section_id")

  @@map("section_fields")
}

model SectionContent {
  id            String   @id @default(uuid())
  fieldContents Json     @map("field_contents")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onDelete: Cascade)
  landingPageId String      @map("landing_page_id")
  section       Section     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId     String      @map("section_id")

  @@map("section_contents")
}
